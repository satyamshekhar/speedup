{"name":"speedup","tagline":"Speed up your javascript.","body":"### API\r\n\r\n#### 1.  Stack/LIFO [Link]\r\n##### Usage\r\n```\r\n  var Stack = require('speedup').Stack;\r\n  var stack = new Stack();\r\n```\r\n\r\n##### Methods\r\n*   `stack.push(element) - O(1)`  \r\n    Inserts the given argument |element| at the top of the stack and returns the number of the elements on the stack after inserting |element|.\r\n\r\n*  `stack.pop() - O(1)`  \r\n    Removes and returns the element at the top of the stack, or undefined if the stack is empty.\r\n\r\n*  `stack.size() - O(1)`  \r\n    Returns the number of elements on the stack..\r\n\r\n*  `stack.empty() - O(1)`  \r\n    Returns true if the stack contains no element, false otherwise.\r\n\r\n*  `stack.clear() - O(1)`  \r\n    Clears all elements from the stack. Returns void.\r\n\r\n*  `stack.peek() - O(1)`  \r\n    Returns the element at the top of the stack if the stack is not empty, undefined otherwise.\r\n\r\n*  `foreach(fn) - O(N)`  \r\n    |fn| should be a function that takes one argument. Executes the function |fn| on each element on the stack in the order they will be popped from the stack. Returns void.\r\n\r\n*  `map(fn) - O(N)`  \r\n    |fn| should be a function that takes one argument. Maps each element on the stack to the value returned by the function |fn|, when it is executed with that element as its argument. The order of execution is as foreach. Returns void.\r\n\r\n*  `toArray() - O(N)`  \r\n    Returns all the elements on the stack in an array. The elements are ordered by the order of their insertion.\r\n\r\n#### 2. Queue/FIFO [Link]\r\n\r\n##### Usage:\r\n```\r\n  var Queue = require('speedup').Queue;\r\n  var queue = new Queue;\r\n  queue.enqueue(3);\r\n  queue.enqueue(4);\r\n  queue.dequeue();  // Returns 3.\r\n```\r\n\r\n##### Methods:\r\n\r\n* `queue.enqueue(element) - O(1)`  \r\n  Inserts |element| at the back of the queue. Returns the number of elements in the queue after inserting |element|.\r\n \r\n* `queue.dequeue() - amortized O(1)`  \r\n  Removes and returns the element at the back of the queue. \r\n\r\n* `queue.size() - O(1)`  \r\n  Returns the number of elements in the queue.\r\n\r\n* `queue.empty() - O(1)`  \r\n  Returns true if the queue contains no element, false otherwise.\r\n\r\n* `clear() - O(1)`  \r\n  Clears all elements from the queue.\r\n\r\n* `peek() - O(1)`  \r\n  Returns the element at the front of the queue if the queue is not empty, undefined otherwise.\r\n\r\n* `foreach(fn) - O(N)`  \r\n  |fn| should be a function that takes one argument. Executes the function |fn| on each element in the queue in the order they will be dequeued from the queue. Returns void.\r\n\r\n* `map(fn) - O(N)`  \r\n  |fn| should be a function that takes one argument. Maps each element in the queue to the value returned by the function |fn|, when it is executed with that element as its argument. The order of execution is as foreach. Returns void.\r\n\r\n* `toArray() - O(N)`  \r\n  Returns all the elements on the stack in an array. The elements are ordered by the order of their insertion.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}